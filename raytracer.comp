#version 430 core
layout(local_size_x = 16, local_size_y = 16) in;
layout(rgba32f, binding = 0) uniform image2D imgOutput;

uniform float uTime;
uniform vec3 uCameraPos;
uniform vec3 uCameraDir;
uniform vec3 uCameraUp;
uniform vec3 uCameraRight;

struct Sphere {
    vec3 center;
    float radius;
    vec3 color;
    float reflectivity;
};

struct Ray {
    vec3 origin;
    vec3 direction;
};

struct HitInfo {
    bool hit;
    float distance;
    vec3 point;
    vec3 normal;
    vec3 color;
    float reflectivity;
};

// Scene spheres
Sphere spheres[5] = Sphere[](
    Sphere(vec3(0, 0, -5), 1.0, vec3(1.0, 0.2, 0.2), 0.3),
    Sphere(vec3(-3, 0, -7), 1.5, vec3(0.2, 1.0, 0.2), 0.8),
    Sphere(vec3(3, 0, -6), 1.2, vec3(0.2, 0.2, 1.0), 0.6),
    Sphere(vec3(0, -101, -5), 100.0, vec3(0.8, 0.8, 0.8), 0.1), // Ground
    Sphere(vec3(-1, 2, -4), 0.8, vec3(1.0, 1.0, 0.2), 0.9)
    Sphere(vec3(-1, 2, -4), 0.8, vec3(1.0, 1.0, 0.2), 0.9)
);

HitInfo intersectSphere(Ray ray, Sphere sphere) {
    HitInfo hit;
    hit.hit = false;
    
    vec3 oc = ray.origin - sphere.center;
    float a = dot(ray.direction, ray.direction);
    float b = 2.0 * dot(oc, ray.direction);
    float c = dot(oc, oc) - sphere.radius * sphere.radius;
    
    float discriminant = b * b - 4.0 * a * c;
    
    if (discriminant < 0) return hit;
    
    float t = (-b - sqrt(discriminant)) / (2.0 * a);
    if (t < 0.001) {
        t = (-b + sqrt(discriminant)) / (2.0 * a);
        if (t < 0.001) return hit;
    }
    
    hit.hit = true;
    hit.distance = t;
    hit.point = ray.origin + t * ray.direction;
    hit.normal = normalize(hit.point - sphere.center);
    hit.color = sphere.color;
    hit.reflectivity = sphere.reflectivity;
    
    return hit;
}

HitInfo intersectScene(Ray ray) {
    HitInfo closestHit;
    closestHit.hit = false;
    closestHit.distance = 999999.0;
    
    for (int i = 0; i < 5; i++) {
        HitInfo hit = intersectSphere(ray, spheres[i]);
        if (hit.hit && hit.distance < closestHit.distance) {
            closestHit = hit;
        }
    }
    
    return closestHit;
}

vec3 reflect(vec3 direction, vec3 normal) {
    return direction - 2.0 * dot(direction, normal) * normal;
}

vec3 traceRay(Ray ray) {
    vec3 color = vec3(0.0);
    vec3 rayColor = vec3(1.0);
    
    for (int bounce = 0; bounce < 3; bounce++) {
        HitInfo hit = intersectScene(ray);
        
        if (!hit.hit) {
            // Sky color
            vec3 skyColor = mix(vec3(0.5, 0.7, 1.0), vec3(1.0, 1.0, 1.0), 
                               smoothstep(-0.5, 0.5, ray.direction.y));
            color += rayColor * skyColor;
            break;
        }
        
        // Simple lighting
        vec3 lightDir = normalize(vec3(0.5, 1.0, 0.3));
        float diffuse = max(dot(hit.normal, lightDir), 0.0);
        vec3 ambient = vec3(0.1);
        
        vec3 surfaceColor = hit.color * (ambient + diffuse * 0.7);
        
        // Add this bounce's contribution
        color += rayColor * surfaceColor * (1.0 - hit.reflectivity);
        
        // Prepare for next bounce
        rayColor *= hit.reflectivity;
        
        if (length(rayColor) < 0.01) break; // Early termination
        
        ray.origin = hit.point + hit.normal * 0.001;
        ray.direction = reflect(ray.direction, hit.normal);
    }
    
    return color;
}

void main() {
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 dims = imageSize(imgOutput);
    
    if (pixelCoords.x >= dims.x || pixelCoords.y >= dims.y) return;
    
    // Convert pixel coordinates to normalized device coordinates
    vec2 uv = (vec2(pixelCoords) + 0.5) / vec2(dims);
    uv = uv * 2.0 - 1.0;
    uv.x *= float(dims.x) / float(dims.y);
    
    // Create ray
    Ray ray;
    ray.origin = uCameraPos;
    ray.direction = normalize(uCameraDir + uv.x * uCameraRight + uv.y * uCameraUp);
    
    vec3 color = traceRay(ray);
    
    // Tone mapping and gamma correction
    color = color / (color + vec3(1.0));
    color = pow(color, vec3(1.0/2.2));
    
    imageStore(imgOutput, pixelCoords, vec4(color, 1.0));
}
