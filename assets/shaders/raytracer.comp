#version 450

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(rgba8, binding = 0) uniform writeonly image2D outputImage;

layout(std430, binding = 1) readonly buffer VertexBuffer {
    vec3 vertices[];
};

layout(std430, binding = 2) readonly buffer IndexBuffer {
    uint indices[];
};

uniform mat4 viewMatrix;
uniform mat4 projMatrix;
uniform vec3 cameraPos;

void main() {
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    ivec2 imageSize = imageSize(outputImage);
    
    if (pixel.x >= imageSize.x || pixel.y >= imageSize.y) return;
    
    // Convert pixel to normalized device coordinates
    vec2 ndc = (vec2(pixel) + 0.5) / vec2(imageSize) * 2.0 - 1.0;
    
    // Generate ray
    vec3 rayOrigin = cameraPos;
    vec3 rayDir = normalize(/* transform ndc to world space direction */);
    
    // Trace ray and calculate color
    vec3 color = traceRay(rayOrigin, rayDir);
    
    imageStore(outputImage, pixel, vec4(color, 1.0));
}
